(* File auto-generated by obus-gen-interface, DO NOT EDIT. *)
open OBus_value
open OBus_value.C
open OBus_member
open OBus_object
module Razer_device_lighting_brightness =
struct
  let interface = "razer.device.lighting.brightness"
  let m_getBrightness = {
    Method.interface = interface;
    Method.member = "getBrightness";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_double));
    Method.annotations = [];
  }
  let m_setBrightness = {
    Method.interface = interface;
    Method.member = "setBrightness";
    Method.i_args = (arg1
                       (Some "brightness", basic_double));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  type 'a members = {
    m_getBrightness : 'a OBus_object.t -> unit -> float Lwt.t;
    m_setBrightness : 'a OBus_object.t -> float -> unit Lwt.t;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_getBrightness members.m_getBrightness;
        method_info m_setBrightness members.m_setBrightness;
      |]
      [|
      |]
      [|
      |]
end
module Razer_device_lighting_chroma =
struct
  let interface = "razer.device.lighting.chroma"
  let m_setBreathDual = {
    Method.interface = interface;
    Method.member = "setBreathDual";
    Method.i_args = (arg6
                       (Some "red1", basic_byte)
                       (Some "green1", basic_byte)
                       (Some "blue1", basic_byte)
                       (Some "red2", basic_byte)
                       (Some "green2", basic_byte)
                       (Some "blue2", basic_byte));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setBreathRandom = {
    Method.interface = interface;
    Method.member = "setBreathRandom";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setBreathSingle = {
    Method.interface = interface;
    Method.member = "setBreathSingle";
    Method.i_args = (arg3
                       (Some "red", basic_byte)
                       (Some "green", basic_byte)
                       (Some "blue", basic_byte));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setCustom = {
    Method.interface = interface;
    Method.member = "setCustom";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setKeyRow = {
    Method.interface = interface;
    Method.member = "setKeyRow";
    Method.i_args = (arg1
                       (Some "payload", byte_array));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setNone = {
    Method.interface = interface;
    Method.member = "setNone";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setReactive = {
    Method.interface = interface;
    Method.member = "setReactive";
    Method.i_args = (arg4
                       (Some "red", basic_byte)
                       (Some "green", basic_byte)
                       (Some "blue", basic_byte)
                       (Some "speed", basic_byte));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setSpectrum = {
    Method.interface = interface;
    Method.member = "setSpectrum";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setStatic = {
    Method.interface = interface;
    Method.member = "setStatic";
    Method.i_args = (arg3
                       (Some "red", basic_byte)
                       (Some "green", basic_byte)
                       (Some "blue", basic_byte));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setWave = {
    Method.interface = interface;
    Method.member = "setWave";
    Method.i_args = (arg1
                       (Some "direction", basic_int32));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  type 'a members = {
    m_setBreathDual : 'a OBus_object.t -> char * char * char * char * char * char -> unit Lwt.t;
    m_setBreathRandom : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_setBreathSingle : 'a OBus_object.t -> char * char * char -> unit Lwt.t;
    m_setCustom : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_setKeyRow : 'a OBus_object.t -> string -> unit Lwt.t;
    m_setNone : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_setReactive : 'a OBus_object.t -> char * char * char * char -> unit Lwt.t;
    m_setSpectrum : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_setStatic : 'a OBus_object.t -> char * char * char -> unit Lwt.t;
    m_setWave : 'a OBus_object.t -> int32 -> unit Lwt.t;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_setBreathDual members.m_setBreathDual;
        method_info m_setBreathRandom members.m_setBreathRandom;
        method_info m_setBreathSingle members.m_setBreathSingle;
        method_info m_setCustom members.m_setCustom;
        method_info m_setKeyRow members.m_setKeyRow;
        method_info m_setNone members.m_setNone;
        method_info m_setReactive members.m_setReactive;
        method_info m_setSpectrum members.m_setSpectrum;
        method_info m_setStatic members.m_setStatic;
        method_info m_setWave members.m_setWave;
      |]
      [|
      |]
      [|
      |]
end
module Razer_device_lighting_custom =
struct
  let interface = "razer.device.lighting.custom"
  let m_setRipple = {
    Method.interface = interface;
    Method.member = "setRipple";
    Method.i_args = (arg4
                       (Some "red", basic_byte)
                       (Some "green", basic_byte)
                       (Some "blue", basic_byte)
                       (Some "refresh_rate", basic_double));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setRippleRandomColour = {
    Method.interface = interface;
    Method.member = "setRippleRandomColour";
    Method.i_args = (arg1
                       (Some "refresh_rate", basic_double));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  type 'a members = {
    m_setRipple : 'a OBus_object.t -> char * char * char * float -> unit Lwt.t;
    m_setRippleRandomColour : 'a OBus_object.t -> float -> unit Lwt.t;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_setRipple members.m_setRipple;
        method_info m_setRippleRandomColour members.m_setRippleRandomColour;
      |]
      [|
      |]
      [|
      |]
end
module Razer_device_misc =
struct
  let interface = "razer.device.misc"
  let m_getDeviceMode = {
    Method.interface = interface;
    Method.member = "getDeviceMode";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_string));
    Method.annotations = [];
  }
  let m_getDeviceName = {
    Method.interface = interface;
    Method.member = "getDeviceName";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_string));
    Method.annotations = [];
  }
  let m_getDeviceType = {
    Method.interface = interface;
    Method.member = "getDeviceType";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_string));
    Method.annotations = [];
  }
  let m_getDriverVersion = {
    Method.interface = interface;
    Method.member = "getDriverVersion";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_string));
    Method.annotations = [];
  }
  let m_getFirmware = {
    Method.interface = interface;
    Method.member = "getFirmware";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_string));
    Method.annotations = [];
  }
  let m_getMatrixDimensions = {
    Method.interface = interface;
    Method.member = "getMatrixDimensions";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, array basic_int32));
    Method.annotations = [];
  }
  let m_getRazerUrls = {
    Method.interface = interface;
    Method.member = "getRazerUrls";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_string));
    Method.annotations = [];
  }
  let m_getSerial = {
    Method.interface = interface;
    Method.member = "getSerial";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_string));
    Method.annotations = [];
  }
  let m_getVidPid = {
    Method.interface = interface;
    Method.member = "getVidPid";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, array basic_int32));
    Method.annotations = [];
  }
  let m_hasDedicatedMacroKeys = {
    Method.interface = interface;
    Method.member = "hasDedicatedMacroKeys";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_boolean));
    Method.annotations = [];
  }
  let m_hasMatrix = {
    Method.interface = interface;
    Method.member = "hasMatrix";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_boolean));
    Method.annotations = [];
  }
  let m_resumeDevice = {
    Method.interface = interface;
    Method.member = "resumeDevice";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_setDeviceMode = {
    Method.interface = interface;
    Method.member = "setDeviceMode";
    Method.i_args = (arg2
                       (Some "mode_id", basic_byte)
                       (Some "param", basic_byte));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_suspendDevice = {
    Method.interface = interface;
    Method.member = "suspendDevice";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  type 'a members = {
    m_getDeviceMode : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getDeviceName : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getDeviceType : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getDriverVersion : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getFirmware : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getMatrixDimensions : 'a OBus_object.t -> unit -> int32 list Lwt.t;
    m_getRazerUrls : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getSerial : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getVidPid : 'a OBus_object.t -> unit -> int32 list Lwt.t;
    m_hasDedicatedMacroKeys : 'a OBus_object.t -> unit -> bool Lwt.t;
    m_hasMatrix : 'a OBus_object.t -> unit -> bool Lwt.t;
    m_resumeDevice : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_setDeviceMode : 'a OBus_object.t -> char * char -> unit Lwt.t;
    m_suspendDevice : 'a OBus_object.t -> unit -> unit Lwt.t;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_getDeviceMode members.m_getDeviceMode;
        method_info m_getDeviceName members.m_getDeviceName;
        method_info m_getDeviceType members.m_getDeviceType;
        method_info m_getDriverVersion members.m_getDriverVersion;
        method_info m_getFirmware members.m_getFirmware;
        method_info m_getMatrixDimensions members.m_getMatrixDimensions;
        method_info m_getRazerUrls members.m_getRazerUrls;
        method_info m_getSerial members.m_getSerial;
        method_info m_getVidPid members.m_getVidPid;
        method_info m_hasDedicatedMacroKeys members.m_hasDedicatedMacroKeys;
        method_info m_hasMatrix members.m_hasMatrix;
        method_info m_resumeDevice members.m_resumeDevice;
        method_info m_setDeviceMode members.m_setDeviceMode;
        method_info m_suspendDevice members.m_suspendDevice;
      |]
      [|
      |]
      [|
      |]
end
