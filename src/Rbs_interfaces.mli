(* File auto-generated by obus-gen-interface, DO NOT EDIT. *)
open OBus_member
module Razer_device_lighting_brightness : sig
  val interface : OBus_name.interface
  val m_getBrightness : (unit, float) Method.t
  val m_setBrightness : (float, unit) Method.t
  type 'a members = {
    m_getBrightness : 'a OBus_object.t -> unit -> float Lwt.t;
    m_setBrightness : 'a OBus_object.t -> float -> unit Lwt.t;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Razer_device_lighting_chroma : sig
  val interface : OBus_name.interface
  val m_setBreathDual : (char * char * char * char * char * char, unit) Method.t
  val m_setBreathRandom : (unit, unit) Method.t
  val m_setBreathSingle : (char * char * char, unit) Method.t
  val m_setCustom : (unit, unit) Method.t
  val m_setKeyRow : (string, unit) Method.t
  val m_setNone : (unit, unit) Method.t
  val m_setReactive : (char * char * char * char, unit) Method.t
  val m_setSpectrum : (unit, unit) Method.t
  val m_setStatic : (char * char * char, unit) Method.t
  val m_setWave : (int32, unit) Method.t
  type 'a members = {
    m_setBreathDual : 'a OBus_object.t -> char * char * char * char * char * char -> unit Lwt.t;
    m_setBreathRandom : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_setBreathSingle : 'a OBus_object.t -> char * char * char -> unit Lwt.t;
    m_setCustom : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_setKeyRow : 'a OBus_object.t -> string -> unit Lwt.t;
    m_setNone : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_setReactive : 'a OBus_object.t -> char * char * char * char -> unit Lwt.t;
    m_setSpectrum : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_setStatic : 'a OBus_object.t -> char * char * char -> unit Lwt.t;
    m_setWave : 'a OBus_object.t -> int32 -> unit Lwt.t;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Razer_device_lighting_custom : sig
  val interface : OBus_name.interface
  val m_setRipple : (char * char * char * float, unit) Method.t
  val m_setRippleRandomColour : (float, unit) Method.t
  type 'a members = {
    m_setRipple : 'a OBus_object.t -> char * char * char * float -> unit Lwt.t;
    m_setRippleRandomColour : 'a OBus_object.t -> float -> unit Lwt.t;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Razer_device_misc : sig
  val interface : OBus_name.interface
  val m_getDeviceMode : (unit, string) Method.t
  val m_getDeviceName : (unit, string) Method.t
  val m_getDeviceType : (unit, string) Method.t
  val m_getDriverVersion : (unit, string) Method.t
  val m_getFirmware : (unit, string) Method.t
  val m_getMatrixDimensions : (unit, int32 list) Method.t
  val m_getRazerUrls : (unit, string) Method.t
  val m_getSerial : (unit, string) Method.t
  val m_getVidPid : (unit, int32 list) Method.t
  val m_hasDedicatedMacroKeys : (unit, bool) Method.t
  val m_hasMatrix : (unit, bool) Method.t
  val m_resumeDevice : (unit, unit) Method.t
  val m_setDeviceMode : (char * char, unit) Method.t
  val m_suspendDevice : (unit, unit) Method.t
  type 'a members = {
    m_getDeviceMode : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getDeviceName : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getDeviceType : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getDriverVersion : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getFirmware : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getMatrixDimensions : 'a OBus_object.t -> unit -> int32 list Lwt.t;
    m_getRazerUrls : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getSerial : 'a OBus_object.t -> unit -> string Lwt.t;
    m_getVidPid : 'a OBus_object.t -> unit -> int32 list Lwt.t;
    m_hasDedicatedMacroKeys : 'a OBus_object.t -> unit -> bool Lwt.t;
    m_hasMatrix : 'a OBus_object.t -> unit -> bool Lwt.t;
    m_resumeDevice : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_setDeviceMode : 'a OBus_object.t -> char * char -> unit Lwt.t;
    m_suspendDevice : 'a OBus_object.t -> unit -> unit Lwt.t;
  }
  val make : 'a members -> 'a OBus_object.interface
end
